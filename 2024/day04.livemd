# Advent of Code 2024

```elixir
Mix.install([
  {:req, "~> 0.3.2"}
])
```

## Day 4

```elixir
input =
  "https://adventofcode.com/2024/day/4/input"
  |> Req.get!(headers: [cookie: "session=#{System.get_env("AOC_COOKIE")}"])
  |> Map.get(:body)
```

```elixir
sample = """
MMMSXXMASM
MSAMXMSMSA
AMXSXMAAMM
MSAMASMSMX
XMASAMXAMM
XXAMMXXAMA
SMSMSASXSS
SAXAMASAAA
MAMMMXMMMM
MXMXAXMASX
"""
```

```elixir
defmodule Day4 do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.split(&1, "", trim: true))
    |> Enum.with_index()
    |> Enum.map(fn {cols, row} ->
      Enum.with_index(cols)
      |> Enum.map(fn {letter, col} ->
        {{col, row}, letter}
      end)
    end)
    |> List.flatten()
    |> Enum.into(%{})
  end

  def find_coords(grid, letter) do
    grid
    |> Enum.filter(fn {_k, v} -> v == letter end)
    |> Enum.map(&elem(&1, 0))
  end
end
```

```elixir
import Day4
```

## Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input
|> parse()
|> then(fn grid ->
  grid
  |> find_coords("X")
  |> Enum.map(fn coord ->
    [
      {1, 0},
      {0, 1},
      {-1, 0},
      {0, -1},
      {1, 1},
      {-1, -1},
      {1, -1},
      {-1, 1}
    ]
    |> Enum.map(fn dir ->
      {coord, dir}
    end)
  end)
  |> List.flatten()
  |> Enum.filter(fn {{x, y}, {dx, dy}} ->
    ["M", "A", "S"]
    |> Enum.reduce_while({x, y}, fn letter, {x, y} ->
      coord = {x + dx, y + dy}

      case Map.get(grid, coord) do
        ^letter ->
          {:cont, coord}

        _ ->
          {:halt, false}
      end
    end)
    |> is_tuple()
  end)
  |> Enum.count()
end)
```

## Part 2

```elixir
input
|> parse()
|> then(fn grid ->
  grid
  |> find_coords("A")
  |> Enum.filter(fn {x, y} ->
    [{-1, -1}, {1, 1}, {1, -1}, {-1, 1}]
    |> Enum.map(fn {dx, dy} -> Map.get(grid, {x + dx, y + dy}) end)
    |> Enum.chunk_every(2)
    |> Enum.all?(&(&1 in [["M", "S"], ["S", "M"]]))
  end)
  |> Enum.count()
end)
```
