# Day 1

## Setup

```elixir
lines = Aoc.get_input(1)
```

```elixir
Aoc.pretty(lines)
```

## Part 1

```elixir
lines
|> Enum.map(&String.to_integer(&1))
|> Enum.reduce({nil, 0}, fn
  n, {prev, total} when is_integer(prev) and n > prev -> {n, total + 1}
  n, {_prev, total} -> {n, total}
end)
|> elem(1)
```

## Part 2

```elixir
lines
|> Enum.map(&String.to_integer(&1))
|> Enum.reduce({nil, nil, []}, fn
  n, {a, nil, xs} -> {n, a, xs}
  n, {a, b, xs} -> {n, a, [n + a + b | xs]}
end)
|> elem(2)
|> Enum.reverse()
|> Enum.reduce({nil, 0}, fn
  n, {prev, total} when is_integer(prev) and n > prev -> {n, total + 1}
  n, {_prev, total} -> {n, total}
end)
|> elem(1)
```

<!-- livebook:{"branch_parent_index":0} -->

## Part 2 revisited

Improvement over the previous solution by performing a single pass over the list.

```elixir
lines
|> Enum.map(&String.to_integer(&1))
# {count, n-1, n-2, prev_sum}
|> Enum.reduce({0, nil, nil, nil}, fn
  n, {c, a, nil, prev} ->
    {c, n, a, prev}

  n, {c, a, b, nil} ->
    {c, n, a, a + b + n}

  n, {c, a, b, prev} ->
    next = a + b + n

    if next > prev do
      {c + 1, n, a, next}
    else
      {c, n, a, next}
    end
end)
|> elem(0)
```
